@startuml

package "vsu.se22.team1" {
    class Manager {
        +buildings : List<Building>
        +employees : List<Employee>
        +accessManager : AccessManager
        
        +void addBuilding(Building building)
        +boolean removeBuilding(Building building)
        +void addEmployee(Employee employee
        +Employee getEmployee(int id)
        +boolean removeEmployee(Employee employee)
        +boolean removeEmployee(int id)
        +String listBuildings()
        +String listEmployees()
        +byte[] serialize()
        -byte[] getBuildingBytes()
        -byte[] getEmployeeBytes()
        -byte[] getAccessBytes()
        {static} +Manager deserialize(File file)
        {static} +Manager deserialize(byte[] bytes)
    }
    
    abstract class Area {
        +uuid : UUID
        #name : String
        #code : int
    
        +boolean contains(Area other)
    }
    
    class Building {
        -suites : List<Suite>
        
        +void addSuite(Suite suite)
        +void removeSuite(Suite suite)
        +List<Suite> getSuites()
        +List<Room> getRooms()
        +boolean contains(Area other)
    }
    
    class Suite {
        -rooms : List<Room>
        
        +void addRoom(Room room)
        +boolean removeRoom(Room room)
        +List<Room> getRooms()
        +boolean contains(Area other)
    }
    
    class Room
    
    Building <|-- Area
    Suite <|-- Area
    Room <|-- Area
    
    Building::suites "1" *-- "many" Suite : contains
    Suite::rooms "1" *-- "many" Room : contains
    
    class AccessManager {
        -manager : Manager
        -history : List<AccessAttempt>
        
        +void logAttempt(Employee e, Area a)
        +void logAttempt(int employeeId, Area a)
        +List<AccessAttempt> getHistory()
        +List<AccessAttempt> getHistory(Area area)
        +List<AccessAttempt> getHistory(int employeeId)
        +List<AccessAttempt> getHistory(Employee employee)
        +List<AccessAttempt> getHistory(AttemptFlag flag)
        +List<AccessAttempt> getHistoryBetween(long start, long end)
        +List<AccessAttempt> getHistoryBetween(long start, long end, AttemptFlag flag)
        +List<AccessAttempt> getHistoryBetween(long start, long end, Area area)
        #void addAll(List<AccessAttempt> accessHistory)
    }
    
    enum AttemptFlag {
        SUCCESS
        DENIED
        SECURITY_ALERT
        
        -code : int
        {static} +fromFlag(int code) : AttemptFlag
    }
    
    class AccessAttempt {
        +timestamp : long
        +area : Area
        +employeeId : int
        +flag : AttemptFlag
    }
    
    class Employee {
        +uuid : UUID
        +name : String
        +id : int
        +access : Map<Area, Boolean>
        
        +void setAccessState(Area area, boolean state)
        +boolean hasAccess(Area area)
        +Set<Area> getAccessibleAreas()
    }
    
    Manager "1" *-- "1" AccessManager : contains
    Manager "1" *-- "many" Building : contains
    Manager "1" *-- "many" Employee : contains
    
    AccessManager  "1" *-- "many" AccessAttempt : contains
    AccessAttempt::flag --> AttemptFlag
    
    class Utils {
        {static} +DATE_FORMAT : DateFormat
        {static} +UUID_BYTES : int
        
        {static} +byte[] uuidToBytes(UUID uuid)
        {static} +UUID uuidFromBytes(byte[] bytes)
        {static} +byte[] longToBytes(long l)
        {static} +long bytesToLong(byte[] bytes)
        {static} +byte[] intToBytes(int i)
        {static} +int bytesToInt(byte[] bytes)
    }
}
    
package "vsu.se22.team1.gui" #DDDDDD {
    class AccessControlSystem {
        -addBuildingButton : JButton
        -addSuiteButton : JButton
        -addRoomButton : JButton
        -addEmployeeButton : JButton
        -testAccessButton : JButton
        -generateReportButton : JButton
        -buttonPanel : JPanel
        
        +void actionPerformed(ActionEvent e)
    }
    
    class AccessControlSystem extends JFrame
    class AccessControlSystem implements ActionListener
}

package "vsu.se22.team1.test" #DDDDDD {
    class ManagerTest {
        ~m : Manager
        ~b : Building
        ~e : Employee
        ~ee : Employee
        
        ~void test_Add_Building()
        ~void test_Remove_Building()
        ~void test_Add_Employee()
        ~void test_Add_Employee_With_UUID()
        ~void test_Get_Employee_By_Id_Fail()
        ~void test_Get_Employee_By_Id()
        ~void test_Remove_Employee()
        ~void test_Remove_Employee_By_Id()
        ~void test_Serialize_Empty()
        ~void test_Deserialize_Byte_Array()
        {static} -boolean sameBuilding(Building a, Building b)
        {static} -boolean sameAccessAttempt(AccessAttempt a, AccessAttempt b)
    }
    
    class BuildingTest {
        ~b : Building
        ~s : Suite
        
        ~void test_Contains()
        ~void test_Add_Suite()
        ~void test_Remove_Suite()
    }
    
    class SuiteTest {
        ~s : Suite
        ~r : Room
        
        ~void test_Contains()
        ~void test_Add_Room()
        ~void test_Remove_Room()
        ~void test_Contains_Fail()
    }
    
    class EmployeeTest {
        ~e : Employee
        ~a : Area
        ~accessible : Set<Area>
        
        ~void test_Has_Access()
        ~void test_Has_Access_Fail()
        ~void test_Get_Accessible_Areas()
        ~void test_Get_Accessible_Areas_Fail()
    }
    
    ManagerTest --> Manager
    BuildingTest --> Building
    SuiteTest --> Suite
    EmployeeTest --> Employee
}

@enduml
